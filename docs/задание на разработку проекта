# Проектирование сметной программы на Python (PyQt5 + SQLite)

## 1. Декомпозиция предметной области

### Основные сущности и их связи:

#### Смета (Estimate)
- **Описание**: Основной документ, содержащий список позиций
- **Атрибуты**:
  - `id` - уникальный идентификатор
  - `название` - название сметы
  - `дата создания` - дата формирования сметы
  - `статус` - черновик/утверждена/архив
- **Связи**:
  - Содержит несколько `EstimateItem`

#### Позиция сметы (EstimateItem)
- **Описание**: Строка в смете (материал, работа, услуга)
- **Атрибуты**:
  - `id` - уникальный идентификатор
  - `наименование` - название позиции
  - `количество` - количество единиц
  - `цена за единицу` - стоимость одной единицы
  - `единица измерения` - единицы измерения (шт., кг, м и т.д.)
- **Связи**:
  - Принадлежит одной `Estimate`

#### Пользователь (User)
- **Описание**: Пользователь системы
- **Атрибуты**:
  - `id` - уникальный идентификатор
  - `логин` - имя пользователя
  - `роль` - права доступа (опционально)

#### Шаблон (Template)
- **Описание**: Предопределенные наборы позиций для быстрого создания смет
- **Атрибуты**:
  - `id` - уникальный идентификатор
  - `название` - название шаблона
  - `позиции` - список позиций шаблона

## 2. Технологический стек

| Компонент       | Технология               | Назначение                          |
|-----------------|--------------------------|-------------------------------------|
| Язык           | Python 3.10+             | Основной язык разработки            |
| GUI            | PyQt5                    | Десктоп-интерфейс                   |
| База данных    | SQLite                   | Локальное хранение данных           |
| Генерация PDF  | ReportLab                | Формирование PDF-документов         |
| СКВ            | Git                      | Контроль версий                     |
| Хостинг кода   | GitHub/GitLab            | Удаленный репозиторий               |

## 3. Архитектурный паттерн: MVP (Model-View-Presenter)

### Преимущества выбора MVP:
- **Гибкость**: Легко заменить View (например, с PyQt5 на Tkinter)
- **Тестируемость**: Presenter можно тестировать отдельно от GUI
- **Четкое разделение**:
  - `Model` - работа с данными (SQLite)
  - `View` - отображение (окна PyQt5)
  - `Presenter` - обработка бизнес-логики

### Используемые паттерны проектирования:
1. **Observer**
   - Для уведомлений об изменениях данных
2. **Factory** 
   - Создание сложных объектов (разные типы смет)
3. **Singleton**
   - Для управления подключением к БД
4. **Repository**
   - Для работы с хранилищем данных

### Схема взаимодействия компонентов:
```mermaid
flowchart LR
    A[View] <--> B[Presenter]
    B <--> C[Model]
    C <--> D[(Database)]








подготовлена class diagram;
подготовлена sequence diagram;
подготовлена use case diagram;
подготовлена activity diagram;
подготовлена state diagram
